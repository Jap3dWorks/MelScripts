//for the replace object options, check modufy > replace objects []
proc jaSplnDstr(float $sdDistanceD){
    string $sdSplineShapes[] = `ls -sl -dag -type nurbsCurve -type bezierCurve`;
    string $sdPolyShapesRe[] = `ls -sl -dag -type mesh`;
    
    for ($sdObj in $sdSplineShapes){
        string $sdPlane[] = `polyPlane -w 1 -h 1 -sx 1 -sy 1 -ax 0 1 0 -cuv 2 -ch 1`;
        float $sdLengt = `arclen $sdObj`;
        delete -ch $sdPlane[0]; 
        string $sdMPath = `pathAnimation -fractionMode true -follow true -followAxis x -upAxis y -worldUpType "vector" 
        -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU 0 -endTimeU $sdLengt $sdObj $sdPlane[0]`;
        keyTangent -itt linear -ott linear ($sdMPath + "_uValue");       
        string $sdSnapShot[] = `snapshot  -increment $sdDistanceD -constructionHistory 1 -startTime 0 -endTime $sdLengt 
        -update demand $sdPlane[0]`;
        string $sdSSplanes[] = `ls -dag -type mesh $sdSnapShot[0]`;
        
        int $sdi = 0;
        string $SaveLocator[];
        for ($sdSSObj in $sdSSplanes){
               matrix $m[4][4] = << 1.0, 0.0, 0.0, 0.0;
                                  0.0, 1.0, 0.0, 0.0;
                                  0.0, 0.0, 1.0, 0.0;
                                  0.0, 0.0, 0.0, 1.0 >>;
               float $AA0[] = `xform -q -ws -t ($sdSSObj + ".vtx[0]")`;
               float $AA1[] = `xform -q -ws -t ($sdSSObj + ".vtx[1]")`;
               float $AA2[] = `xform -q -ws -t ($sdSSObj + ".vtx[2]")`;
               float $PA[] = `objectCenter ($sdSSObj + ".f[0]")`;
               vector $VF1 = <<$AA1[0] - $AA0[0], $AA1[1] - $AA0[1], $AA1[2] - $AA0[2]>>;
               vector $VF2 = <<$AA2[0] - $AA0[0], $AA2[1] - $AA0[1], $AA2[2] - $AA0[2]>>;
               $VF1  = `unit $VF1`;
               $VF2  = `unit $VF2`;
              
               vector $VF3 = cross($VF1, $VF2);
               $VF3  = `unit $VF3`;
               
               $m = << ($VF1.x), ($VF1.y), ($VF1.z), 0.0;     // X axis
                       ($VF3.x), ($VF3.y), ($VF3.z), 0.0;     // Y axis
                       ($VF2.x), ($VF2.y), ($VF2.z), 0.0;     // Z axis
                       ($PA[0]), ($PA[1]), ($PA[2]), 1.0 >>;  // Position
               
              string $locator[] = `spaceLocator`;
              $SaveLocator[$sdi] = $locator[0];
              $sdi++;
               xform -ws -m ($m[0][0]) ($m[0][1]) ($m[0][2]) ($m[0][3]) 
                            ($m[1][0]) ($m[1][1]) ($m[1][2]) ($m[1][3]) 
                            ($m[2][0]) ($m[2][1]) ($m[2][2]) ($m[2][3]) 
                            ($m[3][0]) ($m[3][1]) ($m[3][2]) ($m[3][3]) $locator[0];           
            }//end for
            
          string $sdLGroup = `group -em -n ($sdObj  +"G")`;          
          parent $SaveLocator $sdLGroup; 
          
          if (size($sdPolyShapesRe) == 1){
              string $sdLRMesh[] = `listRelatives -p $sdPolyShapesRe[0]`;
              print $sdLRMesh[0];
              select -r $SaveLocator;
              select -add $sdLRMesh[0];
              ReplaceObjects;
              select -cl;
          }        
          clear $SaveLocator;
          delete $sdSnapShot;
          delete $sdPlane[0];
                    
    }//end for    
}
jaSplnDstr(390.2 /*distance here*/);