global proc jaLinearRedistribute(int $lookAt){
    global int $lineaRedestriSJtrigger; //scriptJob Variable
    string $lrSelection[] = `ls -os`;
    int $lrSelSize = size($lrSelection);
    
   
    if($lrSelSize < 3){
        print ("please select at least three objects");
    }
    else{
         //initial expression 
        string $lrExpresion = "vector $pos1 = <<" + $lrSelection[0] + ".translateX, "+ $lrSelection[0] + ".translateY, " + $lrSelection[0] + ".translateZ>>; \n" +
        "vector $pos2 = <<" + $lrSelection[($lrSelSize - 1)] + ".translateX, "+ $lrSelection[($lrSelSize - 1)] + ".translateY, " + $lrSelection[($lrSelSize - 1)] + ".translateZ>>; \n" +
        "vector $director = $pos1 - $pos2; \n" +
        
        "vector $rotate1 = <<" + $lrSelection[0] + ".rotateX, "+ $lrSelection[0] + ".rotateY, " + $lrSelection[0] + ".rotateZ>>; \n" +
        "vector $rotate2 = <<" + $lrSelection[($lrSelSize - 1)] + ".rotateX, "+ $lrSelection[($lrSelSize - 1)] + ".rotateY, " + $lrSelection[($lrSelSize - 1)] + ".rotateZ>>; \n" +
        "vector $rotateDif = $rotate1 - $rotate2; \n" +
        
        "vector $scale1 = <<" + $lrSelection[0] + ".scaleX, "+ $lrSelection[0] + ".scaleY, " + $lrSelection[0] + ".scaleZ>>; \n" +
        "vector $scale2 = <<" + $lrSelection[($lrSelSize - 1)] + ".scaleX, "+ $lrSelection[($lrSelSize - 1)] + ".scaleY, " + $lrSelection[($lrSelSize - 1)] + ".scaleZ>>; \n" +
        "vector $scaleDif = $scale1 - $scale2; \n";
        //store constraints
        string $storeConstraints;
        //construct expression
        for ($i=1; ($i<($lrSelSize - 1)); $i++){
             string $lrExpresionAdd;
            if ($lookAt){ //wih aim constraint
                     string $aimConstraintIni[]=`aimConstraint  $lrSelection[0] $lrSelection[$i]`;
                     $lrExpresionAdd = $lrSelection[$i] + ".translateX = ((($director.x)/" + ($lrSelSize -1)+ ") * " + $i + " + $pos2.x); \n" +
                                     $lrSelection[$i] + ".translateY = ((($director.y)/" + ($lrSelSize -1)+ ") * " + $i + " + $pos2.y); \n" +
                                     $lrSelection[$i] + ".translateZ = ((($director.z)/" + ($lrSelSize -1)+ ") * " + $i + " + $pos2.z); \n" +
                                     //rotate expression
                                     $aimConstraintIni[0] + ".offsetX = (((($rotateDif.x) /" + ($lrSelSize -1)+ ") * " + $i + "+ $rotate2.x)); \n" +
                                     $aimConstraintIni[0] + ".offsetY = (((($rotateDif.y) /" + ($lrSelSize -1)+ ") * " + $i + "+ $rotate2.y)); \n" +
                                     $aimConstraintIni[0] + ".offsetZ = (((($rotateDif.z) /" + ($lrSelSize -1)+ ") * " + $i + "+ $rotate2.z)); \n" +
                                     //scale expression
                                     $lrSelection[$i] + ".scaleX = ((($scaleDif.x) /" + ($lrSelSize -1)+ ") * " + $i + "+ $scale2.x); \n" +
                                     $lrSelection[$i] + ".scaleY = ((($scaleDif.y) /" + ($lrSelSize -1)+ ") * " + $i + "+ $scale2.y); \n" +
                                     $lrSelection[$i] + ".scaleZ = ((($scaleDif.z) /" + ($lrSelSize -1)+ ") * " + $i + "+ $scale2.z); \n";
                     $storeConstraints= ($i == ($lrSelSize - 2)) ? ($storeConstraints + "\"" + $aimConstraintIni[0]+"\"") : ($storeConstraints + "\"" + $aimConstraintIni[0]+"\",") ;
                     
                }
            else{
                     $lrExpresionAdd = $lrSelection[$i] + ".translateX = ((($director.x) /" + ($lrSelSize -1)+ ") * " + $i + "+ $pos2.x); \n" +
                                     $lrSelection[$i] + ".translateY = ((($director.y) /" + ($lrSelSize -1)+ ") * " + $i + "+ $pos2.y); \n" +
                                     $lrSelection[$i] + ".translateZ = ((($director.z) /" + ($lrSelSize -1)+ ") * " + $i + "+ $pos2.z); \n" +
                                     //rotate expression
                                     $lrSelection[$i] + ".rotateX = (((($rotateDif.x) /" + ($lrSelSize -1)+ ") * " + $i + "+ $rotate2.x)); \n" +
                                     $lrSelection[$i] + ".rotateY = (((($rotateDif.y) /" + ($lrSelSize -1)+ ") * " + $i + "+ $rotate2.y)); \n" +
                                     $lrSelection[$i] + ".rotateZ = (((($rotateDif.z) /" + ($lrSelSize -1)+ ") * " + $i + "+ $rotate2.z)); \n" +
                                     //scale expression
                                     $lrSelection[$i] + ".scaleX = ((($scaleDif.x) /" + ($lrSelSize -1)+ ") * " + $i + "+ $scale2.x); \n" +
                                     $lrSelection[$i] + ".scaleY = ((($scaleDif.y) /" + ($lrSelSize -1)+ ") * " + $i + "+ $scale2.y); \n" +
                                     $lrSelection[$i] + ".scaleZ = ((($scaleDif.z) /" + ($lrSelSize -1)+ ") * " + $i + "+ $scale2.z); \n";
                
            }
           
            $lrExpresion = $lrExpresion + $lrExpresionAdd;
        }
        print $storeConstraints;
        expression -s $lrExpresion  -o "" -n "jaLinearRedistribute" -ae 1 -uc all;
        select -r $lrSelection[($lrSelSize-1)];
        //launch spript Job
         if (( $lineaRedestriSJtrigger)){
              scriptJob -f -kill $lineaRedestriSJtrigger;
             }
         $lineaRedestriSJtrigger = `scriptJob -kws -pro -e "SelectionChanged" ("jaLinearRedBake(\"" + $lrSelection[0]+ "\",\"" + $lrSelection[($lrSelSize-1)] + "\",{" + $storeConstraints +"})")`;
      }
}